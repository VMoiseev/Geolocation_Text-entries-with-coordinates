(()=>{"use strict";var e,r,t,n,o,i,c,a={725:(e,r,t)=>{function n(){const e=new Date;let r=e.getDate();r<10&&(r=`0${r}`);let t=e.getMonth();t<10&&(t=`0${t+1}`);const n=e.getFullYear();let o=e.getHours();o<10&&(o=`0${o}`);let i=e.getMinutes();return i<10&&(i=`0${i}`),`${r}.${t}.${n} ${o}:${i}`}t(177);class o{constructor(e,r,t){this.time=e,this.text=r,this.coords=t}addMessageToDOM(){const e=document.querySelector(".timeline"),r=document.createElement("div");r.classList.add("msg");const t=document.createElement("div");t.classList.add("msgTime"),t.textContent=this.time;const n=document.createElement("div");n.classList.add("msgBody"),n.textContent=this.text;const o=document.createElement("div");o.classList.add("msgCoords"),o.textContent=this.coords,r.appendChild(t),r.appendChild(n),r.appendChild(o),e.appendChild(r)}}function i(e,r,t){const n=document.querySelector(".input"),i=new o(e,r,t);i.addMessageToDOM(i),n.value="",function(e){c.push(e),localStorage.setItem("messages",JSON.stringify({messages:c}))}(i),n.focus()}const c=[],a=document.querySelector(".form"),d=document.querySelector(".modal"),s=document.querySelector(".input"),l=document.querySelector(".location"),u=document.querySelector(".input");!function(){let e;try{e=JSON.parse(localStorage.getItem("messages")),e.messages&&e.messages.forEach((e=>{i(e.time,e.text,e.coords)}))}catch(e){console.log("Invalid savedMsgs",e)}}(),a.addEventListener("submit",(e=>{e.preventDefault();const{value:r}=s,t=n();let o=null;navigator.geolocation.getCurrentPosition((e=>{o=`[${e.coords.latitude}, -${e.coords.longitude}]`,i(t,r,o)}),(()=>{d.style.display="block",l.focus()}))})),document.querySelector(".locationForm").addEventListener("submit",(e=>{e.preventDefault();const r=n(),{value:t}=s;if(l.value.includes(",")){const e=function(e){const r=e.split(","),t=r[0].trim(),n=r[1].trim();return!!function(e){const r=e.split(","),t=r[0].trim(),n=r[1].trim();return!(!/^\[?-?\d{1,2}\.\d{1,9}\]?$/.test(t)||!/^\[?-?\d{1,2}\.\d{1,9}\]?$/.test(n))}(e)&&`[${t}, ${n}]`}(l.value);!1===e?alert("Проверьте правильность ввода"):(d.style.display="none",i(r,t,e),l.value="")}else alert("Проверьте правильность ввода")})),document.querySelector(".cancel").addEventListener("click",(()=>{d.style.display="none",u.focus()}))},783:(e,r,t)=>{var n=t(618),o=Object.create(null),i="undefined"==typeof document,c=Array.prototype.forEach;function a(){}function d(e,r){if(!r){if(!e.href)return;r=e.href.split("?")[0]}if(l(r)&&!1!==e.isLoaded&&r&&r.indexOf(".css")>-1){e.visited=!0;var t=e.cloneNode();t.isLoaded=!1,t.addEventListener("load",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.addEventListener("error",(function(){t.isLoaded||(t.isLoaded=!0,e.parentNode.removeChild(e))})),t.href="".concat(r,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t)}}function s(){var e=document.querySelectorAll("link");c.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,r){if(i)return console.log("no window.document found, will not HMR CSS"),a;var t,u,f,p=function(e){var r=o[e];if(!r){if(document.currentScript)r=document.currentScript.src;else{var t=document.getElementsByTagName("script"),i=t[t.length-1];i&&(r=i.src)}o[e]=r}return function(e){if(!r)return null;var t=r.split(/([^\\/]+)\.js$/),o=t&&t[1];return o&&e?e.split(",").map((function(e){var t=new RegExp("".concat(o,"\\.js$"),"g");return n(r.replace(t,"".concat(e.replace(/{fileName}/g,o),".css")))})):[r.replace(".js",".css")]}}(e);return t=function(){var e=p(r.filename),t=function(e){if(!e)return!1;var r=document.querySelectorAll("link"),t=!1;return c.call(r,(function(r){if(r.href){var o=function(e,r){var t;return e=n(e,{stripWWW:!1}),r.some((function(n){e.indexOf(r)>-1&&(t=n)})),t}(r.href,e);l(o)&&!0!==r.visited&&o&&(d(r,o),t=!0)}})),t}(e);if(r.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();t?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},u=50,f=0,function(){var e=this,r=arguments;clearTimeout(f),f=setTimeout((function(){return t.apply(e,r)}),u)}}},618:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var r=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",t=e.replace(new RegExp(r,"i"),"").split("/"),n=t[0].toLowerCase().replace(/\.$/,"");return t[0]="",r+n+t.reduce((function(e,r){switch(r){case"..":e.pop();break;case".":break;default:e.push(r)}return e}),[]).join("/")}},177:(e,r,t)=>{var n=t(783)(e.id,{locals:!1});e.hot.dispose(n),e.hot.accept(void 0,n)}},d={};function s(e){var r=d[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var t=d[e]={id:e,exports:{}};try{var n={id:e,module:t,factory:a[e],require:s};s.i.forEach((function(e){e(n)})),t=n.module,n.factory.call(t.exports,t,t.exports,n.require)}catch(e){throw t.error=e,e}return t.exports}s.m=a,s.c=d,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>"main.css",s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"20e6fa6b832a09d65ace",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),e={},r="geolocation_text-entries-with-coordinates:",s.l=(t,n,o,i)=>{if(e[t])e[t].push(n);else{var c,a;if(void 0!==o)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==t||u.getAttribute("data-webpack")==r+o){c=u;break}}c||(a=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,s.nc&&c.setAttribute("nonce",s.nc),c.setAttribute("data-webpack",r+o),c.src=t),e[t]=[n];var f=(r,n)=>{c.onerror=c.onload=null,clearTimeout(p);var o=e[t];if(delete e[t],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(n))),r)return r(n)},p=setTimeout(f.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=f.bind(null,c.onerror),c.onload=f.bind(null,c.onload),a&&document.head.appendChild(c)}},(()=>{var e,r,t,n={},o=s.c,i=[],c=[],a="idle",d=0,l=[];function u(e){a=e;for(var r=[],t=0;t<c.length;t++)r[t]=c[t].call(null,e);return Promise.all(r)}function f(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var r=0;r<e.length;r++)e[r]()}}))}function p(e){if("idle"!==a)throw new Error("check() is only allowed in idle status");return u("check").then(s.hmrM).then((function(t){return t?u("prepare").then((function(){var n=[];return r=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,o){return s.hmrC[o](t.c,t.r,t.m,e,r,n),e}),[])).then((function(){return r=function(){return e?m(e):u("ready").then((function(){return n}))},0===d?r():new Promise((function(e){l.push((function(){e(r())}))}));var r}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==a?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+a+")")})):m(e)}function m(e){e=e||{},v();var n=r.map((function(r){return r(e)}));r=void 0;var o=n.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var i=u("dispose");n.forEach((function(e){e.dispose&&e.dispose()}));var c,a=u("apply"),d=function(e){c||(c=e)},s=[];return n.forEach((function(e){if(e.apply){var r=e.apply(d);if(r)for(var t=0;t<r.length;t++)s.push(r[t])}})),Promise.all([i,a]).then((function(){return c?u("fail").then((function(){throw c})):t?m(e).then((function(e){return s.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):u("idle").then((function(){return s}))}))}function v(){if(t)return r||(r=[]),Object.keys(s.hmrI).forEach((function(e){t.forEach((function(t){s.hmrI[e](t,r)}))})),t=void 0,!0}s.hmrD=n,s.i.push((function(l){var m,v,g,y,E=l.module,b=function(r,t){var n=o[t];if(!n)return r;var c=function(c){if(n.hot.active){if(o[c]){var a=o[c].parents;-1===a.indexOf(t)&&a.push(t)}else i=[t],e=c;-1===n.children.indexOf(c)&&n.children.push(c)}else console.warn("[HMR] unexpected require("+c+") from disposed module "+t),i=[];return r(c)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return r[e]},set:function(t){r[e]=t}}};for(var l in r)Object.prototype.hasOwnProperty.call(r,l)&&"e"!==l&&Object.defineProperty(c,l,s(l));return c.e=function(e){return function(e){switch(a){case"ready":u("prepare");case"prepare":return d++,e.then(f,f),e;default:return e}}(r.e(e))},c}(l.require,l.id);E.hot=(m=l.id,v=E,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:g=e!==m,_requireSelf:function(){i=v.parents.slice(),e=g?void 0:m,s(m)},active:!0,accept:function(e,r,t){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)y._acceptedDependencies[e[n]]=r||function(){},y._acceptedErrorHandlers[e[n]]=t;else y._acceptedDependencies[e]=r||function(){},y._acceptedErrorHandlers[e]=t},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._declinedDependencies[e[r]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=y._disposeHandlers.indexOf(e);r>=0&&y._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,a){case"idle":r=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,r)})),u("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,r)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(m)}},check:p,apply:h,status:function(e){if(!e)return a;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var r=c.indexOf(e);r>=0&&c.splice(r,1)},data:n[m]},e=void 0,y),E.parents=i,E.children=[],i=[],l.require=b})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var r=s.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),t=(e,r,t,n)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)t();else{var c=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||r,d=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=c,d.request=a,o.parentNode.removeChild(o),n(d)}},o.href=r,document.head.appendChild(o),o},n=(e,r)=>{for(var t=document.getElementsByTagName("link"),n=0;n<t.length;n++){var o=(c=t[n]).getAttribute("data-href")||c.getAttribute("href");if("stylesheet"===c.rel&&(o===e||o===r))return c}var i=document.getElementsByTagName("style");for(n=0;n<i.length;n++){var c;if((o=(c=i[n]).getAttribute("data-href"))===e||o===r)return c}},o=[],i=[],c=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var r=o[e];r.parentNode&&r.parentNode.removeChild(r)}o.length=0},apply:()=>{for(var e=0;e<i.length;e++)i[e].rel="stylesheet";i.length=0}}),s.hmrC.miniCss=(e,r,a,d,l,u)=>{l.push(c),e.forEach((e=>{var r=s.miniCssF(e),c=s.p+r,a=n(r,c);a&&d.push(new Promise(((r,n)=>{var d=t(e,c,(()=>{d.as="style",d.rel="preload",r()}),n);o.push(a),i.push(d)})))}))},(()=>{var e,r,t,n,o,i=s.hmrS_jsonp=s.hmrS_jsonp||{179:0},c={};function a(r,t){return e=t,new Promise(((e,t)=>{c[r]=e;var n=s.p+s.hu(r),o=new Error;s.l(n,(e=>{if(c[r]){c[r]=void 0;var n=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+r+" failed.\n("+n+": "+i+")",o.name="ChunkLoadError",o.type=n,o.request=i,t(o)}}))}))}function d(e){function c(e){for(var r=[e],t={},n=r.map((function(e){return{chain:[e],id:e}}));n.length>0;){var o=n.pop(),i=o.id,c=o.chain,d=s.c[i];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],f=s.c[u];if(f){if(f.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([u]),moduleId:i,parentId:u};-1===r.indexOf(u)&&(f.hot._acceptedDependencies[i]?(t[u]||(t[u]=[]),a(t[u],[i])):(delete t[u],r.push(u),n.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:t}}function a(e,r){for(var t=0;t<r.length;t++){var n=r[t];-1===e.indexOf(n)&&e.push(n)}}s.f&&delete s.f.jsonpHmr,r=void 0;var d={},l=[],u={},f=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var p in t)if(s.o(t,p)){var h,m=t[p],v=!1,g=!1,y=!1,E="";switch((h=m?c(p):{type:"disposed",moduleId:p}).chain&&(E="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+h.moduleId+E));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+E));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(v=new Error("Aborted because "+p+" is not accepted"+E));break;case"accepted":e.onAccepted&&e.onAccepted(h),g=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),y=!0;break;default:throw new Error("Unexception type "+h.type)}if(v)return{error:v};if(g)for(p in u[p]=m,a(l,h.outdatedModules),h.outdatedDependencies)s.o(h.outdatedDependencies,p)&&(d[p]||(d[p]=[]),a(d[p],h.outdatedDependencies[p]));y&&(a(l,[h.moduleId]),u[p]=f)}t=void 0;for(var b,w=[],_=0;_<l.length;_++){var D=l[_],x=s.c[D];x&&(x.hot._selfAccepted||x.hot._main)&&u[D]!==f&&!x.hot._selfInvalidated&&w.push({module:D,require:x.hot._requireSelf,errorHandler:x.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete i[e]})),n=void 0;for(var r,t=l.slice();t.length>0;){var o=t.pop(),c=s.c[o];if(c){var a={},u=c.hot._disposeHandlers;for(_=0;_<u.length;_++)u[_].call(null,a);for(s.hmrD[o]=a,c.hot.active=!1,delete s.c[o],delete d[o],_=0;_<c.children.length;_++){var f=s.c[c.children[_]];f&&(e=f.parents.indexOf(o))>=0&&f.parents.splice(e,1)}}}for(var p in d)if(s.o(d,p)&&(c=s.c[p]))for(b=d[p],_=0;_<b.length;_++)r=b[_],(e=c.children.indexOf(r))>=0&&c.children.splice(e,1)},apply:function(r){for(var t in u)s.o(u,t)&&(s.m[t]=u[t]);for(var n=0;n<o.length;n++)o[n](s);for(var i in d)if(s.o(d,i)){var c=s.c[i];if(c){b=d[i];for(var a=[],f=[],p=[],h=0;h<b.length;h++){var m=b[h],v=c.hot._acceptedDependencies[m],g=c.hot._acceptedErrorHandlers[m];if(v){if(-1!==a.indexOf(v))continue;a.push(v),f.push(g),p.push(m)}}for(var y=0;y<a.length;y++)try{a[y].call(null,b)}catch(t){if("function"==typeof f[y])try{f[y](t,{moduleId:i,dependencyId:p[y]})}catch(n){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:p[y],error:n,originalError:t}),e.ignoreErrored||(r(n),r(t))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:p[y],error:t}),e.ignoreErrored||r(t)}}}for(var E=0;E<w.length;E++){var _=w[E],D=_.module;try{_.require(D)}catch(t){if("function"==typeof _.errorHandler)try{_.errorHandler(t,{moduleId:D,module:s.c[D]})}catch(n){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:D,error:n,originalError:t}),e.ignoreErrored||(r(n),r(t))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:D,error:t}),e.ignoreErrored||r(t)}}return l}}}self.webpackHotUpdategeolocation_text_entries_with_coordinates=(r,n,i)=>{for(var a in n)s.o(n,a)&&(t[a]=n[a],e&&e.push(a));i&&o.push(i),c[r]&&(c[r](),c[r]=void 0)},s.hmrI.jsonp=function(e,r){t||(t={},o=[],n=[],r.push(d)),s.o(t,e)||(t[e]=s.m[e])},s.hmrC.jsonp=function(e,c,l,u,f,p){f.push(d),r={},n=c,t=l.reduce((function(e,r){return e[r]=!1,e}),{}),o=[],e.forEach((function(e){s.o(i,e)&&void 0!==i[e]?(u.push(a(e,p)),r[e]=!0):r[e]=!1})),s.f&&(s.f.jsonpHmr=function(e,t){r&&s.o(r,e)&&!r[e]&&(t.push(a(e)),r[e]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(725)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBdkosRUFBb0JvQixFQUFFbUksRUFBcUIzSSxLQUMxQzJJLEVBQW9CM0ksS0FFckJ5RCxFQUFTN0wsS0FBS3NSLEVBQWdCbEosSUFDOUIySSxFQUFvQjNJLElBQVcsRUFFakMsRUFFRixFQUVBWixFQUFvQmdFLEtBQU8sS0FDMUIsR0FBcUIsb0JBQVY4SSxNQUF1QixNQUFNLElBQUkvSSxNQUFNLHNDQUNsRCxPQUFPK0ksTUFBTTlNLEVBQW9Ca0ksRUFBSWxJLEVBQW9CZSxRQUFRNEMsTUFBTW9KLElBQ3RFLEdBQXVCLE1BQXBCQSxFQUFTcEYsT0FBWixDQUNBLElBQUlvRixFQUFTQyxHQUFJLE1BQU0sSUFBSWpKLE1BQU0sbUNBQXFDZ0osRUFBU0UsWUFDL0UsT0FBT0YsRUFBU0csTUFGa0IsQ0FFWixHQUNyQixDLEtDdGZ1QmxOLEVBQW9CLEkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW9sb2NhdGlvbl90ZXh0LWVudHJpZXMtd2l0aC1jb29yZGluYXRlcy93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vZ2VvbG9jYXRpb25fdGV4dC1lbnRyaWVzLXdpdGgtY29vcmRpbmF0ZXMvd2VicGFjay9ydW50aW1lL2NzcyBsb2FkaW5nIiwid2VicGFjazovL2dlb2xvY2F0aW9uX3RleHQtZW50cmllcy13aXRoLWNvb3JkaW5hdGVzLy4vc3JjL2pzL3RpbWUuanMiLCJ3ZWJwYWNrOi8vZ2VvbG9jYXRpb25fdGV4dC1lbnRyaWVzLXdpdGgtY29vcmRpbmF0ZXMvLi9zcmMvanMvdGV4dEVudHJ5LmpzIiwid2VicGFjazovL2dlb2xvY2F0aW9uX3RleHQtZW50cmllcy13aXRoLWNvb3JkaW5hdGVzLy4vc3JjL2pzL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vZ2VvbG9jYXRpb25fdGV4dC1lbnRyaWVzLXdpdGgtY29vcmRpbmF0ZXMvLi9zcmMvanMvYXBwLmpzIiwid2VicGFjazovL2dlb2xvY2F0aW9uX3RleHQtZW50cmllcy13aXRoLWNvb3JkaW5hdGVzLy4vc3JjL2pzL2Nvb3Jkcy5qcyIsIndlYnBhY2s6Ly9nZW9sb2NhdGlvbl90ZXh0LWVudHJpZXMtd2l0aC1jb29yZGluYXRlcy8uL3NyYy9qcy92YWxpZGF0ZUNvb3Jkcy5qcyIsIndlYnBhY2s6Ly9nZW9sb2NhdGlvbl90ZXh0LWVudHJpZXMtd2l0aC1jb29yZGluYXRlcy8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcyIsIndlYnBhY2s6Ly9nZW9sb2NhdGlvbl90ZXh0LWVudHJpZXMtd2l0aC1jb29yZGluYXRlcy8uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2htci9ub3JtYWxpemUtdXJsLmpzIiwid2VicGFjazovL2dlb2xvY2F0aW9uX3RleHQtZW50cmllcy13aXRoLWNvb3JkaW5hdGVzLy4vc3JjL2Nzcy9zdHlsZS5jc3M/NmI3YiIsIndlYnBhY2s6Ly9nZW9sb2NhdGlvbl90ZXh0LWVudHJpZXMtd2l0aC1jb29yZGluYXRlcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9nZW9sb2NhdGlvbl90ZXh0LWVudHJpZXMtd2l0aC1jb29yZGluYXRlcy93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgdXBkYXRlIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2dlb2xvY2F0aW9uX3RleHQtZW50cmllcy13aXRoLWNvb3JkaW5hdGVzL3dlYnBhY2svcnVudGltZS9nZXQgbWluaS1jc3MgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vZ2VvbG9jYXRpb25fdGV4dC1lbnRyaWVzLXdpdGgtY29vcmRpbmF0ZXMvd2VicGFjay9ydW50aW1lL2dldCB1cGRhdGUgbWFuaWZlc3QgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vZ2VvbG9jYXRpb25fdGV4dC1lbnRyaWVzLXdpdGgtY29vcmRpbmF0ZXMvd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoIiwid2VicGFjazovL2dlb2xvY2F0aW9uX3RleHQtZW50cmllcy13aXRoLWNvb3JkaW5hdGVzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vZ2VvbG9jYXRpb25fdGV4dC1lbnRyaWVzLXdpdGgtY29vcmRpbmF0ZXMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9nZW9sb2NhdGlvbl90ZXh0LWVudHJpZXMtd2l0aC1jb29yZGluYXRlcy93ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCIsIndlYnBhY2s6Ly9nZW9sb2NhdGlvbl90ZXh0LWVudHJpZXMtd2l0aC1jb29yZGluYXRlcy93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9nZW9sb2NhdGlvbl90ZXh0LWVudHJpZXMtd2l0aC1jb29yZGluYXRlcy93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9nZW9sb2NhdGlvbl90ZXh0LWVudHJpZXMtd2l0aC1jb29yZGluYXRlcy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwiZ2VvbG9jYXRpb25fdGV4dC1lbnRyaWVzLXdpdGgtY29vcmRpbmF0ZXM6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH07XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsInZhciBjcmVhdGVTdHlsZXNoZWV0ID0gKGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpID0+IHtcblx0dmFyIGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRsaW5rVGFnLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXHRsaW5rVGFnLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdHZhciBvbkxpbmtDb21wbGV0ZSA9IChldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcy5cblx0XHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG51bGw7XG5cdFx0aWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJykge1xuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0dmFyIHJlYWxIcmVmID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5ocmVmIHx8IGZ1bGxocmVmO1xuXHRcdFx0dmFyIGVyciA9IG5ldyBFcnJvcihcIkxvYWRpbmcgQ1NTIGNodW5rIFwiICsgY2h1bmtJZCArIFwiIGZhaWxlZC5cXG4oXCIgKyByZWFsSHJlZiArIFwiKVwiKTtcblx0XHRcdGVyci5jb2RlID0gXCJDU1NfQ0hVTktfTE9BRF9GQUlMRURcIjtcblx0XHRcdGVyci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0ZXJyLnJlcXVlc3QgPSByZWFsSHJlZjtcblx0XHRcdGxpbmtUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rVGFnKVxuXHRcdFx0cmVqZWN0KGVycik7XG5cdFx0fVxuXHR9XG5cdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gb25MaW5rQ29tcGxldGU7XG5cdGxpbmtUYWcuaHJlZiA9IGZ1bGxocmVmO1xuXG5cdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG5cdHJldHVybiBsaW5rVGFnO1xufTtcbnZhciBmaW5kU3R5bGVzaGVldCA9IChocmVmLCBmdWxsaHJlZikgPT4ge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0aWYoZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuXHRcdGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCk7XG5cdH0pO1xufVxuLy8gbm8gY2h1bmsgbG9hZGluZ1xuXG52YXIgb2xkVGFncyA9IFtdO1xudmFyIG5ld1RhZ3MgPSBbXTtcbnZhciBhcHBseUhhbmRsZXIgPSAob3B0aW9ucykgPT4ge1xuXHRyZXR1cm4geyBkaXNwb3NlOiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9sZFRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBvbGRUYWcgPSBvbGRUYWdzW2ldO1xuXHRcdFx0aWYob2xkVGFnLnBhcmVudE5vZGUpIG9sZFRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9sZFRhZyk7XG5cdFx0fVxuXHRcdG9sZFRhZ3MubGVuZ3RoID0gMDtcblx0fSwgYXBwbHk6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmV3VGFncy5sZW5ndGg7IGkrKykgbmV3VGFnc1tpXS5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0XHRuZXdUYWdzLmxlbmd0aCA9IDA7XG5cdH0gfTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5taW5pQ3NzID0gKGNodW5rSWRzLCByZW1vdmVkQ2h1bmtzLCByZW1vdmVkTW9kdWxlcywgcHJvbWlzZXMsIGFwcGx5SGFuZGxlcnMsIHVwZGF0ZWRNb2R1bGVzTGlzdCkgPT4ge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y2h1bmtJZHMuZm9yRWFjaCgoY2h1bmtJZCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdHZhciBvbGRUYWcgPSBmaW5kU3R5bGVzaGVldChocmVmLCBmdWxsaHJlZik7XG5cdFx0aWYoIW9sZFRhZykgcmV0dXJuO1xuXHRcdHByb21pc2VzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdFx0dmFyIHRhZyA9IGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsICgpID0+IHtcblx0XHRcdFx0dGFnLmFzID0gXCJzdHlsZVwiO1xuXHRcdFx0XHR0YWcucmVsID0gXCJwcmVsb2FkXCI7XG5cdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdH0sIHJlamVjdCk7XG5cdFx0XHRvbGRUYWdzLnB1c2gob2xkVGFnKTtcblx0XHRcdG5ld1RhZ3MucHVzaCh0YWcpO1xuXHRcdH0pKTtcblx0fSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZSgpIHtcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcblxuICBsZXQgZGF0ZSA9IG5vdy5nZXREYXRlKCk7XG4gIGlmIChkYXRlIDwgMTApIHtcbiAgICBkYXRlID0gYDAke2RhdGV9YDtcbiAgfVxuXG4gIGxldCBtb250aCA9IG5vdy5nZXRNb250aCgpO1xuICBpZiAobW9udGggPCAxMCkge1xuICAgIG1vbnRoID0gYDAke21vbnRoICsgMX1gO1xuICB9XG5cbiAgY29uc3QgeWVhciA9IG5vdy5nZXRGdWxsWWVhcigpO1xuXG4gIGxldCBob3VycyA9IG5vdy5nZXRIb3VycygpO1xuICBpZiAoaG91cnMgPCAxMCkge1xuICAgIGhvdXJzID0gYDAke2hvdXJzfWA7XG4gIH1cblxuICBsZXQgbWludXRlcyA9IG5vdy5nZXRNaW51dGVzKCk7XG4gIGlmIChtaW51dGVzIDwgMTApIHtcbiAgICBtaW51dGVzID0gYDAke21pbnV0ZXN9YDtcbiAgfVxuXG4gIHJldHVybiBgJHtkYXRlfS4ke21vbnRofS4ke3llYXJ9ICR7aG91cnN9OiR7bWludXRlc31gO1xufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxuaW1wb3J0IHNhdmUgZnJvbSAnLi9zdG9yYWdlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWVzc2FnZSB7XG4gIGNvbnN0cnVjdG9yKHRpbWUsIHRleHQsIGNvb3Jkcykge1xuICAgIHRoaXMudGltZSA9IHRpbWU7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLmNvb3JkcyA9IGNvb3JkcztcbiAgfVxuXG4gIGFkZE1lc3NhZ2VUb0RPTSgpIHtcbiAgICBjb25zdCBib3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudGltZWxpbmUnKTtcblxuICAgIGNvbnN0IG1zZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG1zZy5jbGFzc0xpc3QuYWRkKCdtc2cnKTtcblxuICAgIGNvbnN0IG1zZ1RpbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBtc2dUaW1lLmNsYXNzTGlzdC5hZGQoJ21zZ1RpbWUnKTtcbiAgICBtc2dUaW1lLnRleHRDb250ZW50ID0gdGhpcy50aW1lO1xuXG4gICAgY29uc3QgbXNnQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG1zZ0JvZHkuY2xhc3NMaXN0LmFkZCgnbXNnQm9keScpO1xuICAgIG1zZ0JvZHkudGV4dENvbnRlbnQgPSB0aGlzLnRleHQ7XG5cbiAgICBjb25zdCBtc2dDb29yZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBtc2dDb29yZHMuY2xhc3NMaXN0LmFkZCgnbXNnQ29vcmRzJyk7XG4gICAgbXNnQ29vcmRzLnRleHRDb250ZW50ID0gdGhpcy5jb29yZHM7XG5cbiAgICBtc2cuYXBwZW5kQ2hpbGQobXNnVGltZSk7XG4gICAgbXNnLmFwcGVuZENoaWxkKG1zZ0JvZHkpO1xuICAgIG1zZy5hcHBlbmRDaGlsZChtc2dDb29yZHMpO1xuICAgIGJveC5hcHBlbmRDaGlsZChtc2cpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZXNzYWdlKHRpbWUsIHZhbHVlLCBjb29yZHMpIHtcbiAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQnKTtcbiAgY29uc3QgbWVzc2FnZSA9IG5ldyBNZXNzYWdlKHRpbWUsIHZhbHVlLCBjb29yZHMpO1xuICBtZXNzYWdlLmFkZE1lc3NhZ2VUb0RPTShtZXNzYWdlKTtcbiAgaW5wdXQudmFsdWUgPSAnJztcbiAgc2F2ZShtZXNzYWdlKTtcbiAgaW5wdXQuZm9jdXMoKTtcbn1cbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmltcG9ydCB7IGNyZWF0ZU1lc3NhZ2UgfSBmcm9tICcuL3RleHRFbnRyeSc7XG5cbmNvbnN0IGFsbE1lc3NhZ2VzID0gW107XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNhdmUobWVzc2FnZSkge1xuICBhbGxNZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnbWVzc2FnZXMnLCBKU09OLnN0cmluZ2lmeSh7IG1lc3NhZ2VzOiBhbGxNZXNzYWdlcyB9KSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkKCkge1xuICBsZXQgc2F2ZWRNc2dzO1xuXG4gIHRyeSB7XG4gICAgc2F2ZWRNc2dzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnbWVzc2FnZXMnKSk7XG4gICAgaWYgKHNhdmVkTXNncy5tZXNzYWdlcykge1xuICAgICAgc2F2ZWRNc2dzLm1lc3NhZ2VzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgY3JlYXRlTWVzc2FnZShpdGVtLnRpbWUsIGl0ZW0udGV4dCwgaXRlbS5jb29yZHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5sb2coJ0ludmFsaWQgc2F2ZWRNc2dzJywgZSk7XG4gIH1cbn1cbiIsIi8vIFRPRE86IHdyaXRlIGNvZGUgaGVyZVxuXG5pbXBvcnQgZ2V0VGltZSBmcm9tICcuL3RpbWUnO1xuaW1wb3J0IHsgbG9hZCB9IGZyb20gJy4vc3RvcmFnZSc7XG5pbXBvcnQgZ2V0Q29vcmRzIGZyb20gJy4vY29vcmRzJztcbmltcG9ydCB7IGNyZWF0ZU1lc3NhZ2UgfSBmcm9tICcuL3RleHRFbnRyeSc7XG5cbmNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybScpO1xuY29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwnKTtcbmNvbnN0IGlucHV0TWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5pbnB1dCcpO1xuY29uc3QgaW5wdXRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2NhdGlvbicpO1xuY29uc3QgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaW5wdXQnKTtcblxubG9hZCgpO1xuXG5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldmVudCkgPT4ge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICBjb25zdCB7IHZhbHVlIH0gPSBpbnB1dE1lc3NhZ2U7XG4gIGNvbnN0IHRpbWUgPSBnZXRUaW1lKCk7XG4gIGxldCBjb29yZHMgPSBudWxsO1xuXG4gIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oXG4gICAgKHBvc2l0aW9uKSA9PiB7XG4gICAgICBjb29yZHMgPSBgWyR7cG9zaXRpb24uY29vcmRzLmxhdGl0dWRlfSwgLSR7cG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZX1dYDtcbiAgICAgIGNyZWF0ZU1lc3NhZ2UodGltZSwgdmFsdWUsIGNvb3Jkcyk7XG4gICAgfSxcbiAgICAoKSA9PiB7XG4gICAgICBtb2RhbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIGlucHV0TW9kYWwuZm9jdXMoKTtcbiAgICB9LFxuICApO1xufSk7XG5cbmNvbnN0IGxvY2F0aW9uRm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2NhdGlvbkZvcm0nKTtcbmxvY2F0aW9uRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZlbnQpID0+IHtcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgY29uc3QgdGltZSA9IGdldFRpbWUoKTtcbiAgY29uc3QgeyB2YWx1ZSB9ID0gaW5wdXRNZXNzYWdlO1xuICBpZiAoaW5wdXRNb2RhbC52YWx1ZS5pbmNsdWRlcygnLCcpKSB7XG4gICAgY29uc3QgaW5wdXRlZCA9IGdldENvb3JkcyhpbnB1dE1vZGFsLnZhbHVlKTtcbiAgICBpZiAoaW5wdXRlZCA9PT0gZmFsc2UpIHtcbiAgICAgIGFsZXJ0KCfQn9GA0L7QstC10YDRjNGC0LUg0L/RgNCw0LLQuNC70YzQvdC+0YHRgtGMINCy0LLQvtC00LAnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbW9kYWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIGNyZWF0ZU1lc3NhZ2UodGltZSwgdmFsdWUsIGlucHV0ZWQpO1xuICAgICAgaW5wdXRNb2RhbC52YWx1ZSA9ICcnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhbGVydCgn0J/RgNC+0LLQtdGA0YzRgtC1INC/0YDQsNCy0LjQu9GM0L3QvtGB0YLRjCDQstCy0L7QtNCwJyk7XG4gIH1cbn0pO1xuXG5jb25zdCBjYW5jZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FuY2VsJyk7XG5jYW5jZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gIG1vZGFsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGlucHV0LmZvY3VzKCk7XG59KTtcbiIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlQ29vcmRzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29vcmRzKHZhbHVlKSB7XG4gIGNvbnN0IGNvb3JBcnIgPSB2YWx1ZS5zcGxpdCgnLCcpO1xuICBjb25zdCBsYXRpdHVkZSA9IGNvb3JBcnJbMF0udHJpbSgpO1xuICBjb25zdCBsb25naXR1ZGUgPSBjb29yQXJyWzFdLnRyaW0oKTtcbiAgaWYgKHZhbGlkYXRlKHZhbHVlKSkge1xuICAgIHJldHVybiBgWyR7bGF0aXR1ZGV9LCAke2xvbmdpdHVkZX1dYDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2YWxpZGF0ZSh2YWx1ZSkge1xuICBjb25zdCBjb29yQXJyID0gdmFsdWUuc3BsaXQoJywnKTtcbiAgY29uc3QgbGF0aXR1ZGUgPSBjb29yQXJyWzBdLnRyaW0oKTtcbiAgY29uc3QgbG9uZ2l0dWRlID0gY29vckFyclsxXS50cmltKCk7XG5cbiAgaWYgKC9eXFxbPy0/XFxkezEsMn1cXC5cXGR7MSw5fVxcXT8kLy50ZXN0KGxhdGl0dWRlKVxuICAgICYmIC9eXFxbPy0/XFxkezEsMn1cXC5cXGR7MSw5fVxcXT8kLy50ZXN0KGxvbmdpdHVkZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cblxuLypcbiAgZXNsaW50LWRpc2FibGVcbiAgbm8tY29uc29sZSxcbiAgZnVuYy1uYW1lc1xuKi9cbnZhciBub3JtYWxpemVVcmwgPSByZXF1aXJlKCcuL25vcm1hbGl6ZS11cmwnKTtcblxudmFyIHNyY0J5TW9kdWxlSWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xudmFyIG5vRG9jdW1lbnQgPSB0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnO1xudmFyIGZvckVhY2ggPSBBcnJheS5wcm90b3R5cGUuZm9yRWFjaDtcblxuZnVuY3Rpb24gZGVib3VuY2UoZm4sIHRpbWUpIHtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuXG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZnVuY3Rpb25DYWxsID0gZnVuY3Rpb24gZnVuY3Rpb25DYWxsKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb25DYWxsLCB0aW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRTY3JpcHRVcmwobW9kdWxlSWQpIHtcbiAgdmFyIHNyYyA9IHNyY0J5TW9kdWxlSWRbbW9kdWxlSWRdO1xuXG4gIGlmICghc3JjKSB7XG4gICAgaWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpIHtcbiAgICAgIHNyYyA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcbiAgICAgIHZhciBsYXN0U2NyaXB0VGFnID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAobGFzdFNjcmlwdFRhZykge1xuICAgICAgICBzcmMgPSBsYXN0U2NyaXB0VGFnLnNyYztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzcmNCeU1vZHVsZUlkW21vZHVsZUlkXSA9IHNyYztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZmlsZU1hcCkge1xuICAgIGlmICghc3JjKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgc3BsaXRSZXN1bHQgPSBzcmMuc3BsaXQoLyhbXlxcXFwvXSspXFwuanMkLyk7XG4gICAgdmFyIGZpbGVuYW1lID0gc3BsaXRSZXN1bHQgJiYgc3BsaXRSZXN1bHRbMV07XG5cbiAgICBpZiAoIWZpbGVuYW1lKSB7XG4gICAgICByZXR1cm4gW3NyYy5yZXBsYWNlKCcuanMnLCAnLmNzcycpXTtcbiAgICB9XG5cbiAgICBpZiAoIWZpbGVNYXApIHtcbiAgICAgIHJldHVybiBbc3JjLnJlcGxhY2UoJy5qcycsICcuY3NzJyldO1xuICAgIH1cblxuICAgIHJldHVybiBmaWxlTWFwLnNwbGl0KCcsJykubWFwKGZ1bmN0aW9uIChtYXBSdWxlKSB7XG4gICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cChcIlwiLmNvbmNhdChmaWxlbmFtZSwgXCJcXFxcLmpzJFwiKSwgJ2cnKTtcbiAgICAgIHJldHVybiBub3JtYWxpemVVcmwoc3JjLnJlcGxhY2UocmVnLCBcIlwiLmNvbmNhdChtYXBSdWxlLnJlcGxhY2UoL3tmaWxlTmFtZX0vZywgZmlsZW5hbWUpLCBcIi5jc3NcIikpKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ3NzKGVsLCB1cmwpIHtcbiAgaWYgKCF1cmwpIHtcbiAgICBpZiAoIWVsLmhyZWYpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG5cbiAgICB1cmwgPSBlbC5ocmVmLnNwbGl0KCc/JylbMF07XG4gIH1cblxuICBpZiAoIWlzVXJsUmVxdWVzdCh1cmwpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGVsLmlzTG9hZGVkID09PSBmYWxzZSkge1xuICAgIC8vIFdlIHNlZW0gdG8gYmUgYWJvdXQgdG8gcmVwbGFjZSBhIGNzcyBsaW5rIHRoYXQgaGFzbid0IGxvYWRlZCB5ZXQuXG4gICAgLy8gV2UncmUgcHJvYmFibHkgY2hhbmdpbmcgdGhlIHNhbWUgZmlsZSBtb3JlIHRoYW4gb25jZS5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoIXVybCB8fCAhKHVybC5pbmRleE9mKCcuY3NzJykgPiAtMSkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cblxuICBlbC52aXNpdGVkID0gdHJ1ZTtcbiAgdmFyIG5ld0VsID0gZWwuY2xvbmVOb2RlKCk7XG4gIG5ld0VsLmlzTG9hZGVkID0gZmFsc2U7XG4gIG5ld0VsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5ld0VsLmlzTG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV3RWwuaXNMb2FkZWQgPSB0cnVlO1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9KTtcbiAgbmV3RWwuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG5ld0VsLmlzTG9hZGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV3RWwuaXNMb2FkZWQgPSB0cnVlO1xuICAgIGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpO1xuICB9KTtcbiAgbmV3RWwuaHJlZiA9IFwiXCIuY29uY2F0KHVybCwgXCI/XCIpLmNvbmNhdChEYXRlLm5vdygpKTtcblxuICBpZiAoZWwubmV4dFNpYmxpbmcpIHtcbiAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdFbCwgZWwubmV4dFNpYmxpbmcpO1xuICB9IGVsc2Uge1xuICAgIGVsLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQobmV3RWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJlbG9hZFVybChocmVmLCBzcmMpIHtcbiAgdmFyIHJldDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cbiAgaHJlZiA9IG5vcm1hbGl6ZVVybChocmVmLCB7XG4gICAgc3RyaXBXV1c6IGZhbHNlXG4gIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgYXJyYXktY2FsbGJhY2stcmV0dXJuXG5cbiAgc3JjLnNvbWUoZnVuY3Rpb24gKHVybCkge1xuICAgIGlmIChocmVmLmluZGV4T2Yoc3JjKSA+IC0xKSB7XG4gICAgICByZXQgPSB1cmw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gcmVsb2FkU3R5bGUoc3JjKSB7XG4gIGlmICghc3JjKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGluaycpO1xuICB2YXIgbG9hZGVkID0gZmFsc2U7XG4gIGZvckVhY2guY2FsbChlbGVtZW50cywgZnVuY3Rpb24gKGVsKSB7XG4gICAgaWYgKCFlbC5ocmVmKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHVybCA9IGdldFJlbG9hZFVybChlbC5ocmVmLCBzcmMpO1xuXG4gICAgaWYgKCFpc1VybFJlcXVlc3QodXJsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChlbC52aXNpdGVkID09PSB0cnVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHVybCkge1xuICAgICAgdXBkYXRlQ3NzKGVsLCB1cmwpO1xuICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbG9hZGVkO1xufVxuXG5mdW5jdGlvbiByZWxvYWRBbGwoKSB7XG4gIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmsnKTtcbiAgZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICBpZiAoZWwudmlzaXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHVwZGF0ZUNzcyhlbCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc1VybFJlcXVlc3QodXJsKSB7XG4gIC8vIEFuIFVSTCBpcyBub3QgYW4gcmVxdWVzdCBpZlxuICAvLyBJdCBpcyBub3QgaHR0cCBvciBodHRwc1xuICBpZiAoIS9eaHR0cHM/Oi9pLnRlc3QodXJsKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtb2R1bGVJZCwgb3B0aW9ucykge1xuICBpZiAobm9Eb2N1bWVudCkge1xuICAgIGNvbnNvbGUubG9nKCdubyB3aW5kb3cuZG9jdW1lbnQgZm91bmQsIHdpbGwgbm90IEhNUiBDU1MnKTtcbiAgICByZXR1cm4gbm9vcDtcbiAgfVxuXG4gIHZhciBnZXRTY3JpcHRTcmMgPSBnZXRDdXJyZW50U2NyaXB0VXJsKG1vZHVsZUlkKTtcblxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgdmFyIHNyYyA9IGdldFNjcmlwdFNyYyhvcHRpb25zLmZpbGVuYW1lKTtcbiAgICB2YXIgcmVsb2FkZWQgPSByZWxvYWRTdHlsZShzcmMpO1xuXG4gICAgaWYgKG9wdGlvbnMubG9jYWxzKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0hNUl0gRGV0ZWN0ZWQgbG9jYWwgY3NzIG1vZHVsZXMuIFJlbG9hZCBhbGwgY3NzJyk7XG4gICAgICByZWxvYWRBbGwoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocmVsb2FkZWQpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbSE1SXSBjc3MgcmVsb2FkICVzJywgc3JjLmpvaW4oJyAnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbSE1SXSBSZWxvYWQgYWxsIGNzcycpO1xuICAgICAgcmVsb2FkQWxsKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRlYm91bmNlKHVwZGF0ZSwgNTApO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVybChwYXRoQ29tcG9uZW50cykge1xuICByZXR1cm4gcGF0aENvbXBvbmVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2N1bXVsYXRvciwgaXRlbSkge1xuICAgIHN3aXRjaCAoaXRlbSkge1xuICAgICAgY2FzZSAnLi4nOlxuICAgICAgICBhY2N1bXVsYXRvci5wb3AoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJy4nOlxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYWNjdW11bGF0b3IucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH0sIFtdKS5qb2luKCcvJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybFN0cmluZykge1xuICB1cmxTdHJpbmcgPSB1cmxTdHJpbmcudHJpbSgpO1xuXG4gIGlmICgvXmRhdGE6L2kudGVzdCh1cmxTdHJpbmcpKSB7XG4gICAgcmV0dXJuIHVybFN0cmluZztcbiAgfVxuXG4gIHZhciBwcm90b2NvbCA9IHVybFN0cmluZy5pbmRleE9mKCcvLycpICE9PSAtMSA/IHVybFN0cmluZy5zcGxpdCgnLy8nKVswXSArICcvLycgOiAnJztcbiAgdmFyIGNvbXBvbmVudHMgPSB1cmxTdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKHByb3RvY29sLCAnaScpLCAnJykuc3BsaXQoJy8nKTtcbiAgdmFyIGhvc3QgPSBjb21wb25lbnRzWzBdLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFwuJC8sICcnKTtcbiAgY29tcG9uZW50c1swXSA9ICcnO1xuICB2YXIgcGF0aCA9IG5vcm1hbGl6ZVVybChjb21wb25lbnRzKTtcbiAgcmV0dXJuIHByb3RvY29sICsgaG9zdCArIHBhdGg7XG59OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9O1xuICAgIGlmKG1vZHVsZS5ob3QpIHtcbiAgICAgIC8vIDE2Nzk3MjM2NjY5NDNcbiAgICAgIHZhciBjc3NSZWxvYWQgPSByZXF1aXJlKFwiL2hvbWUvYXBwdmV5b3IvcHJvamVjdHMvZ2VvbG9jYXRpb24tdGV4dC1lbnRyaWVzLXdpdGgtY29vcmRpbmF0ZXMvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzXCIpKG1vZHVsZS5pZCwge1wibG9jYWxzXCI6ZmFsc2V9KTtcbiAgICAgIG1vZHVsZS5ob3QuZGlzcG9zZShjc3NSZWxvYWQpO1xuICAgICAgbW9kdWxlLmhvdC5hY2NlcHQodW5kZWZpbmVkLCBjc3NSZWxvYWQpO1xuICAgIH1cbiAgIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdGlmIChjYWNoZWRNb2R1bGUuZXJyb3IgIT09IHVuZGVmaW5lZCkgdGhyb3cgY2FjaGVkTW9kdWxlLmVycm9yO1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHR0cnkge1xuXHRcdHZhciBleGVjT3B0aW9ucyA9IHsgaWQ6IG1vZHVsZUlkLCBtb2R1bGU6IG1vZHVsZSwgZmFjdG9yeTogX193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0sIHJlcXVpcmU6IF9fd2VicGFja19yZXF1aXJlX18gfTtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7IGhhbmRsZXIoZXhlY09wdGlvbnMpOyB9KTtcblx0XHRtb2R1bGUgPSBleGVjT3B0aW9ucy5tb2R1bGU7XG5cdFx0ZXhlY09wdGlvbnMuZmFjdG9yeS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBleGVjT3B0aW9ucy5yZXF1aXJlKTtcblx0fSBjYXRjaChlKSB7XG5cdFx0bW9kdWxlLmVycm9yID0gZTtcblx0XHR0aHJvdyBlO1xuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbl9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXztcblxuLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTtcblxuIiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5odSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgXCJtYWluXCIgKyBcIi5jc3NcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGID0gKCkgPT4gKFwibWFpbi5cIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgXCIuaG90LXVwZGF0ZS5qc29uXCIpOyIsIl9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+IChcIjIwZTZmYTZiODMyYTA5ZDY1YWNlXCIpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIGN1cnJlbnRNb2R1bGVEYXRhID0ge307XG52YXIgaW5zdGFsbGVkTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18uYztcblxuLy8gbW9kdWxlIGFuZCByZXF1aXJlIGNyZWF0aW9uXG52YXIgY3VycmVudENoaWxkTW9kdWxlO1xudmFyIGN1cnJlbnRQYXJlbnRzID0gW107XG5cbi8vIHN0YXR1c1xudmFyIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyA9IFtdO1xudmFyIGN1cnJlbnRTdGF0dXMgPSBcImlkbGVcIjtcblxuLy8gd2hpbGUgZG93bmxvYWRpbmdcbnZhciBibG9ja2luZ1Byb21pc2VzID0gMDtcbnZhciBibG9ja2luZ1Byb21pc2VzV2FpdGluZyA9IFtdO1xuXG4vLyBUaGUgdXBkYXRlIGluZm9cbnZhciBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycztcbnZhciBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXM7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJEID0gY3VycmVudE1vZHVsZURhdGE7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaS5wdXNoKGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cdHZhciBtb2R1bGUgPSBvcHRpb25zLm1vZHVsZTtcblx0dmFyIHJlcXVpcmUgPSBjcmVhdGVSZXF1aXJlKG9wdGlvbnMucmVxdWlyZSwgb3B0aW9ucy5pZCk7XG5cdG1vZHVsZS5ob3QgPSBjcmVhdGVNb2R1bGVIb3RPYmplY3Qob3B0aW9ucy5pZCwgbW9kdWxlKTtcblx0bW9kdWxlLnBhcmVudHMgPSBjdXJyZW50UGFyZW50cztcblx0bW9kdWxlLmNoaWxkcmVuID0gW107XG5cdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdG9wdGlvbnMucmVxdWlyZSA9IHJlcXVpcmU7XG59KTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDID0ge307XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlUmVxdWlyZShyZXF1aXJlLCBtb2R1bGVJZCkge1xuXHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblx0aWYgKCFtZSkgcmV0dXJuIHJlcXVpcmU7XG5cdHZhciBmbiA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XG5cdFx0aWYgKG1lLmhvdC5hY3RpdmUpIHtcblx0XHRcdGlmIChpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRzID0gaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzO1xuXHRcdFx0XHRpZiAocGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA9PT0gLTEpIHtcblx0XHRcdFx0XHRwYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XG5cdFx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XG5cdFx0XHR9XG5cdFx0XHRpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHtcblx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArXG5cdFx0XHRcdFx0cmVxdWVzdCArXG5cdFx0XHRcdFx0XCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICtcblx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0KTtcblx0XHRcdGN1cnJlbnRQYXJlbnRzID0gW107XG5cdFx0fVxuXHRcdHJldHVybiByZXF1aXJlKHJlcXVlc3QpO1xuXHR9O1xuXHR2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gcmVxdWlyZVtuYW1lXTtcblx0XHRcdH0sXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRyZXF1aXJlW25hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcblx0Zm9yICh2YXIgbmFtZSBpbiByZXF1aXJlKSB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXF1aXJlLCBuYW1lKSAmJiBuYW1lICE9PSBcImVcIikge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSkpO1xuXHRcdH1cblx0fVxuXHRmbi5lID0gZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRyZXR1cm4gdHJhY2tCbG9ja2luZ1Byb21pc2UocmVxdWlyZS5lKGNodW5rSWQpKTtcblx0fTtcblx0cmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNb2R1bGVIb3RPYmplY3QobW9kdWxlSWQsIG1lKSB7XG5cdHZhciBfbWFpbiA9IGN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQ7XG5cdHZhciBob3QgPSB7XG5cdFx0Ly8gcHJpdmF0ZSBzdHVmZlxuXHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXG5cdFx0X2FjY2VwdGVkRXJyb3JIYW5kbGVyczoge30sXG5cdFx0X2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSxcblx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcblx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcblx0XHRfc2VsZkludmFsaWRhdGVkOiBmYWxzZSxcblx0XHRfZGlzcG9zZUhhbmRsZXJzOiBbXSxcblx0XHRfbWFpbjogX21haW4sXG5cdFx0X3JlcXVpcmVTZWxmOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IG1lLnBhcmVudHMuc2xpY2UoKTtcblx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IF9tYWluID8gdW5kZWZpbmVkIDogbW9kdWxlSWQ7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcblx0XHR9LFxuXG5cdFx0Ly8gTW9kdWxlIEFQSVxuXHRcdGFjdGl2ZTogdHJ1ZSxcblx0XHRhY2NlcHQ6IGZ1bmN0aW9uIChkZXAsIGNhbGxiYWNrLCBlcnJvckhhbmRsZXIpIHtcblx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuXHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdFx0aG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwW2ldXSA9IGVycm9ySGFuZGxlcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcF0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkZWNsaW5lOiBmdW5jdGlvbiAoZGVwKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIgJiYgZGVwICE9PSBudWxsKVxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcblx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xuXHRcdFx0ZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xuXHRcdH0sXG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xuXHRcdFx0aWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXHRcdGludmFsaWRhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7XG5cdFx0XHRzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcblx0XHRcdFx0Y2FzZSBcImlkbGVcIjpcblx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XShcblx0XHRcdFx0XHRcdFx0bW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNldFN0YXR1cyhcInJlYWR5XCIpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicmVhZHlcIjpcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInByZXBhcmVcIjpcblx0XHRcdFx0Y2FzZSBcImNoZWNrXCI6XG5cdFx0XHRcdGNhc2UgXCJkaXNwb3NlXCI6XG5cdFx0XHRcdGNhc2UgXCJhcHBseVwiOlxuXHRcdFx0XHRcdChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2goXG5cdFx0XHRcdFx0XHRtb2R1bGVJZFxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0Ly8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlc1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuXHRcdGNoZWNrOiBob3RDaGVjayxcblx0XHRhcHBseTogaG90QXBwbHksXG5cdFx0c3RhdHVzOiBmdW5jdGlvbiAobCkge1xuXHRcdFx0aWYgKCFsKSByZXR1cm4gY3VycmVudFN0YXR1cztcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuXHRcdH0sXG5cdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHtcblx0XHRcdHZhciBpZHggPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcblx0XHRcdGlmIChpZHggPj0gMCkgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xuXHRcdH0sXG5cblx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcblx0XHRkYXRhOiBjdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF1cblx0fTtcblx0Y3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xuXHRyZXR1cm4gaG90O1xufVxuXG5mdW5jdGlvbiBzZXRTdGF0dXMobmV3U3RhdHVzKSB7XG5cdGN1cnJlbnRTdGF0dXMgPSBuZXdTdGF0dXM7XG5cdHZhciByZXN1bHRzID0gW107XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspXG5cdFx0cmVzdWx0c1tpXSA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVyc1tpXS5jYWxsKG51bGwsIG5ld1N0YXR1cyk7XG5cblx0cmV0dXJuIFByb21pc2UuYWxsKHJlc3VsdHMpO1xufVxuXG5mdW5jdGlvbiB1bmJsb2NrKCkge1xuXHRpZiAoLS1ibG9ja2luZ1Byb21pc2VzID09PSAwKSB7XG5cdFx0c2V0U3RhdHVzKFwicmVhZHlcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkge1xuXHRcdFx0XHR2YXIgbGlzdCA9IGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nO1xuXHRcdFx0XHRibG9ja2luZ1Byb21pc2VzV2FpdGluZyA9IFtdO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRsaXN0W2ldKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxufVxuXG5mdW5jdGlvbiB0cmFja0Jsb2NraW5nUHJvbWlzZShwcm9taXNlKSB7XG5cdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0c2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcblx0XHQvKiBmYWxsdGhyb3VnaCAqL1xuXHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRibG9ja2luZ1Byb21pc2VzKys7XG5cdFx0XHRwcm9taXNlLnRoZW4odW5ibG9jaywgdW5ibG9jayk7XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pIHtcblx0aWYgKGJsb2NraW5nUHJvbWlzZXMgPT09IDApIHJldHVybiBmbigpO1xuXHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcblx0XHRibG9ja2luZ1Byb21pc2VzV2FpdGluZy5wdXNoKGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlc29sdmUoZm4oKSk7XG5cdFx0fSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBob3RDaGVjayhhcHBseU9uVXBkYXRlKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcImlkbGVcIikge1xuXHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuXHR9XG5cdHJldHVybiBzZXRTdGF0dXMoXCJjaGVja1wiKVxuXHRcdC50aGVuKF9fd2VicGFja19yZXF1aXJlX18uaG1yTSlcblx0XHQudGhlbihmdW5jdGlvbiAodXBkYXRlKSB7XG5cdFx0XHRpZiAoIXVwZGF0ZSkge1xuXHRcdFx0XHRyZXR1cm4gc2V0U3RhdHVzKGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkgPyBcInJlYWR5XCIgOiBcImlkbGVcIikudGhlbihcblx0XHRcdFx0XHRmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRTdGF0dXMoXCJwcmVwYXJlXCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgdXBkYXRlZE1vZHVsZXMgPSBbXTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblxuXHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoXG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDKS5yZWR1Y2UoZnVuY3Rpb24gKFxuXHRcdFx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdFx0XHRrZXlcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yQ1trZXldKFxuXHRcdFx0XHRcdFx0XHR1cGRhdGUuYyxcblx0XHRcdFx0XHRcdFx0dXBkYXRlLnIsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZS5tLFxuXHRcdFx0XHRcdFx0XHRwcm9taXNlcyxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMsXG5cdFx0XHRcdFx0XHRcdHVwZGF0ZWRNb2R1bGVzXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHByb21pc2VzO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0W10pXG5cdFx0XHRcdCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdGlmIChhcHBseU9uVXBkYXRlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBpbnRlcm5hbEFwcGx5KGFwcGx5T25VcGRhdGUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcInJlYWR5XCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB1cGRhdGVkTW9kdWxlcztcblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG59XG5cbmZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHtcblx0aWYgKGN1cnJlbnRTdGF0dXMgIT09IFwicmVhZHlcIikge1xuXHRcdHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXMgKHN0YXRlOiBcIiArXG5cdFx0XHRcdFx0Y3VycmVudFN0YXR1cyArXG5cdFx0XHRcdFx0XCIpXCJcblx0XHRcdCk7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsQXBwbHkob3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRhcHBseUludmFsaWRhdGVkTW9kdWxlcygpO1xuXG5cdHZhciByZXN1bHRzID0gY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG5cdFx0cmV0dXJuIGhhbmRsZXIob3B0aW9ucyk7XG5cdH0pO1xuXHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IHVuZGVmaW5lZDtcblxuXHR2YXIgZXJyb3JzID0gcmVzdWx0c1xuXHRcdC5tYXAoZnVuY3Rpb24gKHIpIHtcblx0XHRcdHJldHVybiByLmVycm9yO1xuXHRcdH0pXG5cdFx0LmZpbHRlcihCb29sZWFuKTtcblxuXHRpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcblx0XHRyZXR1cm4gc2V0U3RhdHVzKFwiYWJvcnRcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcnNbMF07XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2Vcblx0dmFyIGRpc3Bvc2VQcm9taXNlID0gc2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcblxuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuZGlzcG9zZSkgcmVzdWx0LmRpc3Bvc2UoKTtcblx0fSk7XG5cblx0Ly8gTm93IGluIFwiYXBwbHlcIiBwaGFzZVxuXHR2YXIgYXBwbHlQcm9taXNlID0gc2V0U3RhdHVzKFwiYXBwbHlcIik7XG5cblx0dmFyIGVycm9yO1xuXHR2YXIgcmVwb3J0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG5cdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG5cdH07XG5cblx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuYXBwbHkpIHtcblx0XHRcdHZhciBtb2R1bGVzID0gcmVzdWx0LmFwcGx5KHJlcG9ydEVycm9yKTtcblx0XHRcdGlmIChtb2R1bGVzKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKG1vZHVsZXNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gUHJvbWlzZS5hbGwoW2Rpc3Bvc2VQcm9taXNlLCBhcHBseVByb21pc2VdKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0cmV0dXJuIHNldFN0YXR1cyhcImZhaWxcIikudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHRocm93IGVycm9yO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykge1xuXHRcdFx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucykudGhlbihmdW5jdGlvbiAobGlzdCkge1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHtcblx0XHRcdFx0XHRpZiAobGlzdC5pbmRleE9mKG1vZHVsZUlkKSA8IDApIGxpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRyZXR1cm4gbGlzdDtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBzZXRTdGF0dXMoXCJpZGxlXCIpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIG91dGRhdGVkTW9kdWxlcztcblx0XHR9KTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkge1xuXHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0aWYgKCFjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycykgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSB1bmRlZmluZWQ7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn0iLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJTX2pzb25wID0gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJTX2pzb25wIHx8IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxudmFyIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3Q7XG52YXIgd2FpdGluZ1VwZGF0ZVJlc29sdmVzID0ge307XG5mdW5jdGlvbiBsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSB7XG5cdGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QgPSB1cGRhdGVkTW9kdWxlc0xpc3Q7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gcmVzb2x2ZTtcblx0XHQvLyBzdGFydCB1cGRhdGUgY2h1bmsgbG9hZGluZ1xuXHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmh1KGNodW5rSWQpO1xuXHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHRcdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkXG5cdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBob3QgdXBkYXRlIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkKTtcblx0fSk7XG59XG5cbnNlbGZbXCJ3ZWJwYWNrSG90VXBkYXRlZ2VvbG9jYXRpb25fdGV4dF9lbnRyaWVzX3dpdGhfY29vcmRpbmF0ZXNcIl0gPSAoY2h1bmtJZCwgbW9yZU1vZHVsZXMsIHJ1bnRpbWUpID0+IHtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdGlmKGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QpIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIGN1cnJlbnRVcGRhdGVSdW50aW1lLnB1c2gocnVudGltZSk7XG5cdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpO1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0fVxufTtcblxudmFyIGN1cnJlbnRVcGRhdGVDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZTtcbnZhciBjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcztcbnZhciBjdXJyZW50VXBkYXRlUnVudGltZTtcbmZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7XG5cdGZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG5cdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNoYWluOiBbaWRdLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcblx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcblx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbW9kdWxlIHx8XG5cdFx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZClcblx0XHRcdClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW3BhcmVudElkXTtcblx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcblx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuXHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG5cdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG5cdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0aWQ6IHBhcmVudElkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG5cdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG5cdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcblx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGJbaV07XG5cdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG5cdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cblx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuXHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgbW9kdWxlLmlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG5cdFx0KTtcblx0fTtcblxuXHRmb3IgKHZhciBtb2R1bGVJZCBpbiBjdXJyZW50VXBkYXRlKSB7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRcdHZhciBuZXdNb2R1bGVGYWN0b3J5ID0gY3VycmVudFVwZGF0ZVttb2R1bGVJZF07XG5cdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG5cdFx0XHR2YXIgcmVzdWx0O1xuXHRcdFx0aWYgKG5ld01vZHVsZUZhY3RvcnkpIHtcblx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKG1vZHVsZUlkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdCA9IHtcblx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuXHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcblx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG5cdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcblx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcblx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuXHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRlcnJvcjogYWJvcnRFcnJvclxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRvQXBwbHkpIHtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBuZXdNb2R1bGVGYWN0b3J5O1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuXHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcblx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Y3VycmVudFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuXHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG5cdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcblx0Zm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tqXTtcblx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdGlmIChcblx0XHRcdG1vZHVsZSAmJlxuXHRcdFx0KG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZCB8fCBtb2R1bGUuaG90Ll9tYWluKSAmJlxuXHRcdFx0Ly8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZFxuXHRcdFx0YXBwbGllZFVwZGF0ZVtvdXRkYXRlZE1vZHVsZUlkXSAhPT0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlICYmXG5cdFx0XHQvLyB3aGVuIGNhbGxlZCBpbnZhbGlkYXRlIHNlbGYtYWNjZXB0aW5nIGlzIG5vdCBwb3NzaWJsZVxuXHRcdFx0IW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZFxuXHRcdCkge1xuXHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xuXHRcdFx0XHRtb2R1bGU6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdHJlcXVpcmU6IG1vZHVsZS5ob3QuX3JlcXVpcmVTZWxmLFxuXHRcdFx0XHRlcnJvckhhbmRsZXI6IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuXG5cdHJldHVybiB7XG5cdFx0ZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuXHRcdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0fSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHVuZGVmaW5lZDtcblxuXHRcdFx0dmFyIGlkeDtcblx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuXHRcdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG5cdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0XHRpZiAoIW1vZHVsZSkgY29udGludWU7XG5cblx0XHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuXHRcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcblx0XHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcblx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdGRpc3Bvc2VIYW5kbGVyc1tqXS5jYWxsKG51bGwsIGRhdGEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yRFttb2R1bGVJZF0gPSBkYXRhO1xuXG5cdFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG5cdFx0XHRcdG1vZHVsZS5ob3QuYWN0aXZlID0gZmFsc2U7XG5cblx0XHRcdFx0Ly8gcmVtb3ZlIG1vZHVsZSBmcm9tIGNhY2hlXG5cdFx0XHRcdGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcblx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcblxuXHRcdFx0XHQvLyByZW1vdmUgXCJwYXJlbnRzXCIgcmVmZXJlbmNlcyBmcm9tIGFsbCBjaGlsZHJlblxuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0dmFyIGNoaWxkID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZS5jaGlsZHJlbltqXV07XG5cdFx0XHRcdFx0aWYgKCFjaGlsZCkgY29udGludWU7XG5cdFx0XHRcdFx0aWR4ID0gY2hpbGQucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKTtcblx0XHRcdFx0XHRpZiAoaWR4ID49IDApIHtcblx0XHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXG5cdFx0XHR2YXIgZGVwZW5kZW5jeTtcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuXHRcdFx0XHRcdFx0XHRpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGFwcGx5OiBmdW5jdGlvbiAocmVwb3J0RXJyb3IpIHtcblx0XHRcdC8vIGluc2VydCBuZXcgY29kZVxuXHRcdFx0Zm9yICh2YXIgdXBkYXRlTW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGFwcGxpZWRVcGRhdGUsIHVwZGF0ZU1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVt1cGRhdGVNb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW3VwZGF0ZU1vZHVsZUlkXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBydW4gbmV3IHJ1bnRpbWUgbW9kdWxlc1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjdXJyZW50VXBkYXRlUnVudGltZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlUnVudGltZVtpXShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcblx0XHRcdGZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcblx0XHRcdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHtcblx0XHRcdFx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdGlmIChtb2R1bGUpIHtcblx0XHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID1cblx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdFx0dmFyIGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyA9IFtdO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuXHRcdFx0XHRcdFx0XHR2YXIgYWNjZXB0Q2FsbGJhY2sgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xuXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JIYW5kbGVyID1cblx0XHRcdFx0XHRcdFx0XHRtb2R1bGUuaG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdGlmIChhY2NlcHRDYWxsYmFjaykge1xuXHRcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihhY2NlcHRDYWxsYmFjaykgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChhY2NlcHRDYWxsYmFjayk7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVycy5wdXNoKGVycm9ySGFuZGxlcik7XG5cdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzLnB1c2goZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgY2FsbGJhY2tzLmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzW2tdLmNhbGwobnVsbCwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xuXHRcdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAodHlwZW9mIGVycm9ySGFuZGxlcnNba10gPT09IFwiZnVuY3Rpb25cIikge1xuXHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyc1trXShlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycjIpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG91dGRhdGVkTW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykge1xuXHRcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTtcblx0XHRcdFx0dmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aXRlbS5yZXF1aXJlKG1vZHVsZUlkKTtcblx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIsIHtcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlOiBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXG5cdFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcblx0XHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycjIpO1xuXHRcdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdHJlcG9ydEVycm9yKGVycik7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvdXRkYXRlZE1vZHVsZXM7XG5cdFx0fVxuXHR9O1xufVxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJLmpzb25wID0gZnVuY3Rpb24gKG1vZHVsZUlkLCBhcHBseUhhbmRsZXJzKSB7XG5cdGlmICghY3VycmVudFVwZGF0ZSkge1xuXHRcdGN1cnJlbnRVcGRhdGUgPSB7fTtcblx0XHRjdXJyZW50VXBkYXRlUnVudGltZSA9IFtdO1xuXHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gW107XG5cdFx0YXBwbHlIYW5kbGVycy5wdXNoKGFwcGx5SGFuZGxlcik7XG5cdH1cblx0aWYgKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7XG5cdFx0Y3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdO1xuXHR9XG59O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDLmpzb25wID0gZnVuY3Rpb24gKFxuXHRjaHVua0lkcyxcblx0cmVtb3ZlZENodW5rcyxcblx0cmVtb3ZlZE1vZHVsZXMsXG5cdHByb21pc2VzLFxuXHRhcHBseUhhbmRsZXJzLFxuXHR1cGRhdGVkTW9kdWxlc0xpc3Rcbikge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y3VycmVudFVwZGF0ZUNodW5rcyA9IHt9O1xuXHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHJlbW92ZWRDaHVua3M7XG5cdGN1cnJlbnRVcGRhdGUgPSByZW1vdmVkTW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG5cdFx0b2JqW2tleV0gPSBmYWxzZTtcblx0XHRyZXR1cm4gb2JqO1xuXHR9LCB7fSk7XG5cdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdGNodW5rSWRzLmZvckVhY2goZnVuY3Rpb24gKGNodW5rSWQpIHtcblx0XHRpZiAoXG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdICE9PSB1bmRlZmluZWRcblx0XHQpIHtcblx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQsIHVwZGF0ZWRNb2R1bGVzTGlzdCkpO1xuXHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSBmYWxzZTtcblx0XHR9XG5cdH0pO1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yID0gZnVuY3Rpb24gKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3MgJiZcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGVDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRcdCFjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdXG5cdFx0XHQpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkpO1xuXHRcdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0gPSAoKSA9PiB7XG5cdGlmICh0eXBlb2YgZmV0Y2ggPT09IFwidW5kZWZpbmVkXCIpIHRocm93IG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydDogbmVlZCBmZXRjaCBBUElcIik7XG5cdHJldHVybiBmZXRjaChfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckYoKSkudGhlbigocmVzcG9uc2UpID0+IHtcblx0XHRpZihyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkgcmV0dXJuOyAvLyBubyB1cGRhdGUgYXZhaWxhYmxlXG5cdFx0aWYoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggdXBkYXRlIG1hbmlmZXN0IFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG5cdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0fSk7XG59O1xuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiLy8gbW9kdWxlIGNhY2hlIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkXG4vLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjUpO1xuIl0sIm5hbWVzIjpbImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsImNyZWF0ZVN0eWxlc2hlZXQiLCJmaW5kU3R5bGVzaGVldCIsIm9sZFRhZ3MiLCJuZXdUYWdzIiwiYXBwbHlIYW5kbGVyIiwiZ2V0VGltZSIsIm5vdyIsIkRhdGUiLCJkYXRlIiwiZ2V0RGF0ZSIsIm1vbnRoIiwiZ2V0TW9udGgiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJob3VycyIsImdldEhvdXJzIiwibWludXRlcyIsImdldE1pbnV0ZXMiLCJNZXNzYWdlIiwiY29uc3RydWN0b3IiLCJ0aW1lIiwidGV4dCIsImNvb3JkcyIsInRoaXMiLCJhZGRNZXNzYWdlVG9ET00iLCJib3giLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJtc2ciLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwibXNnVGltZSIsInRleHRDb250ZW50IiwibXNnQm9keSIsIm1zZ0Nvb3JkcyIsImFwcGVuZENoaWxkIiwiY3JlYXRlTWVzc2FnZSIsInZhbHVlIiwiaW5wdXQiLCJtZXNzYWdlIiwiYWxsTWVzc2FnZXMiLCJwdXNoIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXNzYWdlcyIsInNhdmUiLCJmb2N1cyIsImZvcm0iLCJtb2RhbCIsImlucHV0TWVzc2FnZSIsImlucHV0TW9kYWwiLCJzYXZlZE1zZ3MiLCJwYXJzZSIsImdldEl0ZW0iLCJmb3JFYWNoIiwiaXRlbSIsImUiLCJjb25zb2xlIiwibG9nIiwibG9hZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwibmF2aWdhdG9yIiwiZ2VvbG9jYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJwb3NpdGlvbiIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwic3R5bGUiLCJkaXNwbGF5IiwiaW5jbHVkZXMiLCJpbnB1dGVkIiwiY29vckFyciIsInNwbGl0IiwidHJpbSIsInRlc3QiLCJ2YWxpZGF0ZSIsImdldENvb3JkcyIsImFsZXJ0Iiwibm9ybWFsaXplVXJsIiwic3JjQnlNb2R1bGVJZCIsIk9iamVjdCIsImNyZWF0ZSIsIm5vRG9jdW1lbnQiLCJBcnJheSIsInByb3RvdHlwZSIsIm5vb3AiLCJ1cGRhdGVDc3MiLCJlbCIsInVybCIsImhyZWYiLCJpc1VybFJlcXVlc3QiLCJpc0xvYWRlZCIsImluZGV4T2YiLCJ2aXNpdGVkIiwibmV3RWwiLCJjbG9uZU5vZGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJjb25jYXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsInJlbG9hZEFsbCIsImVsZW1lbnRzIiwicXVlcnlTZWxlY3RvckFsbCIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlSWQiLCJvcHRpb25zIiwiZm4iLCJ0aW1lb3V0IiwiZ2V0U2NyaXB0U3JjIiwic3JjIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImxhc3RTY3JpcHRUYWciLCJsZW5ndGgiLCJmaWxlTWFwIiwic3BsaXRSZXN1bHQiLCJmaWxlbmFtZSIsIm1hcCIsIm1hcFJ1bGUiLCJyZWciLCJSZWdFeHAiLCJyZXBsYWNlIiwiZ2V0Q3VycmVudFNjcmlwdFVybCIsInJlbG9hZGVkIiwibG9hZGVkIiwicmV0Iiwic3RyaXBXV1ciLCJzb21lIiwiZ2V0UmVsb2FkVXJsIiwicmVsb2FkU3R5bGUiLCJsb2NhbHMiLCJqb2luIiwic2VsZiIsImFyZ3MiLCJhcmd1bWVudHMiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJ1cmxTdHJpbmciLCJwcm90b2NvbCIsImNvbXBvbmVudHMiLCJob3N0IiwidG9Mb3dlckNhc2UiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsInBvcCIsImNzc1JlbG9hZCIsImlkIiwiaG90IiwiZGlzcG9zZSIsImFjY2VwdCIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJjYWNoZWRNb2R1bGUiLCJlcnJvciIsImV4ZWNPcHRpb25zIiwiZmFjdG9yeSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJyZXF1aXJlIiwiaSIsImhhbmRsZXIiLCJtIiwiYyIsImh1IiwiY2h1bmtJZCIsImgiLCJtaW5pQ3NzRiIsImhtckYiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwid2luZG93IiwibyIsIm9iaiIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImwiLCJkb25lIiwia2V5Iiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjaGFyc2V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsIm9uZXJyb3IiLCJvbmxvYWQiLCJkb25lRm5zIiwiYmluZCIsInR5cGUiLCJ0YXJnZXQiLCJoZWFkIiwiY3VycmVudENoaWxkTW9kdWxlIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImN1cnJlbnRTdGF0dXMiLCJibG9ja2luZ1Byb21pc2VzIiwiYmxvY2tpbmdQcm9taXNlc1dhaXRpbmciLCJzZXRTdGF0dXMiLCJuZXdTdGF0dXMiLCJyZXN1bHRzIiwiUHJvbWlzZSIsImFsbCIsInVuYmxvY2siLCJ0aGVuIiwibGlzdCIsImhvdENoZWNrIiwiYXBwbHlPblVwZGF0ZSIsIkVycm9yIiwiaG1yTSIsInVwZGF0ZSIsInVwZGF0ZWRNb2R1bGVzIiwia2V5cyIsImhtckMiLCJwcm9taXNlcyIsInIiLCJpbnRlcm5hbEFwcGx5IiwicmVzb2x2ZSIsImFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzIiwiaG90QXBwbHkiLCJlcnJvcnMiLCJmaWx0ZXIiLCJCb29sZWFuIiwiZGlzcG9zZVByb21pc2UiLCJyZXN1bHQiLCJhcHBseVByb21pc2UiLCJyZXBvcnRFcnJvciIsImVyciIsIm91dGRhdGVkTW9kdWxlcyIsIm1vZHVsZXMiLCJobXJJIiwiaG1yRCIsIm1lIiwiX21haW4iLCJyZXF1ZXN0IiwiYWN0aXZlIiwicGFyZW50cyIsImNoaWxkcmVuIiwid2FybiIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsIm5hbWUiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwiZGVmaW5lUHJvcGVydHkiLCJwcm9taXNlIiwidHJhY2tCbG9ja2luZ1Byb21pc2UiLCJjcmVhdGVSZXF1aXJlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2FjY2VwdGVkRXJyb3JIYW5kbGVycyIsIl9kZWNsaW5lZERlcGVuZGVuY2llcyIsIl9zZWxmQWNjZXB0ZWQiLCJfc2VsZkRlY2xpbmVkIiwiX3NlbGZJbnZhbGlkYXRlZCIsIl9kaXNwb3NlSGFuZGxlcnMiLCJfcmVxdWlyZVNlbGYiLCJzbGljZSIsImRlcCIsImNhbGxiYWNrIiwiZXJyb3JIYW5kbGVyIiwiZGVjbGluZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpZHgiLCJzcGxpY2UiLCJpbnZhbGlkYXRlIiwiY2hlY2siLCJzdGF0dXMiLCJhZGRTdGF0dXNIYW5kbGVyIiwicmVtb3ZlU3RhdHVzSGFuZGxlciIsImRhdGEiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJwIiwiZnVsbGhyZWYiLCJyZWplY3QiLCJsaW5rVGFnIiwicmVsIiwiZXJyb3JUeXBlIiwicmVhbEhyZWYiLCJjb2RlIiwiZXhpc3RpbmdMaW5rVGFncyIsImRhdGFIcmVmIiwidGFnIiwiZXhpc3RpbmdTdHlsZVRhZ3MiLCJvbGRUYWciLCJtaW5pQ3NzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJhcHBseUhhbmRsZXJzIiwidXBkYXRlZE1vZHVsZXNMaXN0IiwiYXMiLCJjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0IiwiY3VycmVudFVwZGF0ZUNodW5rcyIsImN1cnJlbnRVcGRhdGUiLCJjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyIsImN1cnJlbnRVcGRhdGVSdW50aW1lIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG1yU19qc29ucCIsIndhaXRpbmdVcGRhdGVSZXNvbHZlcyIsImxvYWRVcGRhdGVDaHVuayIsInJlYWxTcmMiLCJnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMiLCJ1cGRhdGVNb2R1bGVJZCIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwicXVldWUiLCJjaGFpbiIsInF1ZXVlSXRlbSIsInBhcmVudElkIiwicGFyZW50IiwiYWRkQWxsVG9TZXQiLCJhIiwiYiIsImYiLCJqc29ucEhtciIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJuZXdNb2R1bGVGYWN0b3J5IiwiYWJvcnRFcnJvciIsImRvQXBwbHkiLCJkb0Rpc3Bvc2UiLCJjaGFpbkluZm8iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyIsIm91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyIsImoiLCJvdXRkYXRlZE1vZHVsZUlkIiwiZGVwZW5kZW5jeSIsImRpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwiY2FsbGJhY2tzIiwiZXJyb3JIYW5kbGVycyIsImRlcGVuZGVuY2llc0ZvckNhbGxiYWNrcyIsImFjY2VwdENhbGxiYWNrIiwiayIsImRlcGVuZGVuY3lJZCIsImVycjIiLCJvbkVycm9yZWQiLCJvcmlnaW5hbEVycm9yIiwiaWdub3JlRXJyb3JlZCIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImpzb25wIiwiZmV0Y2giLCJyZXNwb25zZSIsIm9rIiwic3RhdHVzVGV4dCIsImpzb24iXSwic291cmNlUm9vdCI6IiJ9